openapi: 3.0.3
info:
  title: AgentOS API
  description: |
    AgentOS is a production-ready HTTP server for managing and running AI agents.

    ## Features
    - Session management for multi-turn conversations
    - Agent registration and execution
    - Support for tool-enabled agents
    - Memory and context management

    ## Authentication
    Currently no authentication is required. Authentication can be added via middleware.

  version: 1.0.0
  contact:
    name: Agno-Go Team
    url: https://github.com/rexleimo/agno-go
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8080
    description: Local development server
  - url: http://localhost:8080/api/v1
    description: API v1 endpoint

tags:
  - name: Health
    description: Health check endpoints
  - name: Sessions
    description: Session management operations
  - name: Agents
    description: Agent management and execution
  - name: Knowledge
    description: Knowledge base search and configuration operations

paths:
  /health:
    get:
      tags:
        - Health
      summary: Health check
      description: Returns the health status of the AgentOS server
      operationId: getHealth
      responses:
        '200':
          description: Server is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: healthy
                  service:
                    type: string
                    example: agentos
                  time:
                    type: integer
                    format: int64
                    description: Unix timestamp
                    example: 1704067200

  /api/v1/sessions:
    post:
      tags:
        - Sessions
      summary: Create a new session
      description: Creates a new session for managing multi-turn conversations with an agent
      operationId: createSession
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSessionRequest'
      responses:
        '201':
          description: Session created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    get:
      tags:
        - Sessions
      summary: List sessions
      description: Lists all sessions with optional filtering
      operationId: listSessions
      parameters:
        - name: agent_id
          in: query
          description: Filter by agent ID
          schema:
            type: string
        - name: user_id
          in: query
          description: Filter by user ID
          schema:
            type: string
        - name: limit
          in: query
          description: Maximum number of sessions to return
          schema:
            type: integer
            default: 100
        - name: offset
          in: query
          description: Number of sessions to skip
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: List of sessions
          content:
            application/json:
              schema:
                type: object
                properties:
                  sessions:
                    type: array
                    items:
                      $ref: '#/components/schemas/SessionResponse'
                  count:
                    type: integer
                  total:
                    type: integer

  /api/v1/sessions/{id}:
    get:
      tags:
        - Sessions
      summary: Get session by ID
      description: Retrieves details of a specific session
      operationId: getSession
      parameters:
        - name: id
          in: path
          required: true
          description: Session ID
          schema:
            type: string
      responses:
        '200':
          description: Session details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionResponse'
        '404':
          description: Session not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - Sessions
      summary: Update session
      description: Updates an existing session's name or metadata
      operationId: updateSession
      parameters:
        - name: id
          in: path
          required: true
          description: Session ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSessionRequest'
      responses:
        '200':
          description: Session updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionResponse'
        '404':
          description: Session not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
        - Sessions
      summary: Delete session
      description: Deletes a session and all its associated data
      operationId: deleteSession
      parameters:
        - name: id
          in: path
          required: true
          description: Session ID
          schema:
            type: string
      responses:
        '200':
          description: Session deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: session deleted
        '404':
          description: Session not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/agents:
    get:
      tags:
        - Agents
      summary: List registered agents
      description: Returns a list of all registered agents in the system
      operationId: listAgents
      responses:
        '200':
          description: List of agents
          content:
            application/json:
              schema:
                type: object
                properties:
                  agents:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          description: Agent ID
                        name:
                          type: string
                          description: Agent name
                  count:
                    type: integer

  /api/v1/agents/{id}/run:
    post:
      tags:
        - Agents
      summary: Run an agent
      description: Executes an agent with the provided input
      operationId: runAgent
      parameters:
        - name: id
          in: path
          required: true
          description: Agent ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AgentRunRequest'
      responses:
        '200':
          description: Agent execution successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentRunResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Agent not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Agent execution failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/knowledge/search:
    post:
      tags:
        - Knowledge
      summary: Search knowledge base
      description: Performs a vector similarity search in the knowledge base
      operationId: searchKnowledge
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VectorSearchRequest'
            example:
              query: "如何使用 agno-Go 创建 Agent?"
              limit: 10
              offset: 0
      responses:
        '200':
          description: Search successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VectorSearchResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Search failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: Knowledge service not configured
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/knowledge/config:
    get:
      tags:
        - Knowledge
      summary: Get knowledge base configuration
      description: Returns available chunkers, vector databases, and embedding model information
      operationId: getKnowledgeConfig
      responses:
        '200':
          description: Configuration information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KnowledgeConfigResponse'
        '503':
          description: Knowledge service not configured
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    CreateSessionRequest:
      type: object
      required:
        - agent_id
      properties:
        agent_id:
          type: string
          description: ID of the agent to associate with this session
          example: gpt-4-agent
        user_id:
          type: string
          description: Optional user ID for the session
          example: user-123
        name:
          type: string
          description: Optional name for the session
          example: Customer Support Chat
        metadata:
          type: object
          additionalProperties: true
          description: Optional metadata for the session

    UpdateSessionRequest:
      type: object
      properties:
        name:
          type: string
          description: Updated name for the session
        metadata:
          type: object
          additionalProperties: true
          description: Updated metadata for the session

    SessionResponse:
      type: object
      properties:
        session_id:
          type: string
          description: Unique session identifier
          example: 550e8400-e29b-41d4-a716-446655440000
        agent_id:
          type: string
          description: Associated agent ID
          example: gpt-4-agent
        user_id:
          type: string
          description: Associated user ID
          example: user-123
        name:
          type: string
          description: Session name
          example: Customer Support Chat
        created_at:
          type: string
          format: date-time
          description: Timestamp when session was created
        updated_at:
          type: string
          format: date-time
          description: Timestamp when session was last updated
        metadata:
          type: object
          additionalProperties: true
          description: Session metadata

    AgentRunRequest:
      type: object
      required:
        - input
      properties:
        input:
          type: string
          description: Input text to send to the agent
          example: What is the weather in San Francisco?
        session_id:
          type: string
          description: Optional session ID for multi-turn conversations
          example: 550e8400-e29b-41d4-a716-446655440000
        stream:
          type: boolean
          description: Whether to stream the response (not yet implemented)
          default: false

    AgentRunResponse:
      type: object
      properties:
        content:
          type: string
          description: Agent's response content
          example: The weather in San Francisco is currently sunny with a temperature of 65°F.
        session_id:
          type: string
          description: Session ID if provided
          example: 550e8400-e29b-41d4-a716-446655440000
        metadata:
          type: object
          additionalProperties: true
          description: Additional metadata about the run
          properties:
            agent_id:
              type: string

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Error message
          example: agent not found
        message:
          type: string
          description: Detailed error message
          example: agent with ID 'non-existent-agent' not found
        code:
          type: string
          description: Error code
          example: AGENT_NOT_FOUND

    VectorSearchRequest:
      type: object
      required:
        - query
      properties:
        query:
          type: string
          description: Search query text
          example: "如何使用 agno-Go 创建 Agent?"
        limit:
          type: integer
          description: Maximum number of results to return (default 10, max 100)
          default: 10
          minimum: 1
          maximum: 100
        offset:
          type: integer
          description: Pagination offset
          default: 0
          minimum: 0
        filters:
          type: object
          additionalProperties: true
          description: Metadata filter conditions
          example:
            source: "documentation"
        collection_name:
          type: string
          description: Collection name (optional)

    VectorSearchResult:
      type: object
      properties:
        id:
          type: string
          description: Document ID
          example: "doc_12345"
        content:
          type: string
          description: Document content
          example: "To create an Agent in agno-Go, use agent.New()..."
        metadata:
          type: object
          additionalProperties: true
          description: Document metadata
          example:
            source: "documentation"
            page: 5
        score:
          type: number
          format: float
          description: Similarity score (higher is better)
          example: 0.95
        distance:
          type: number
          format: float
          description: Distance metric (lower is better)
          example: 0.05

    VectorSearchResponse:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/VectorSearchResult'
        meta:
          $ref: '#/components/schemas/PaginationMeta'

    PaginationMeta:
      type: object
      properties:
        total_count:
          type: integer
          description: Total number of results
          example: 42
        page:
          type: integer
          description: Current page number
          example: 1
        page_size:
          type: integer
          description: Number of results per page
          example: 10
        total_pages:
          type: integer
          description: Total number of pages
          example: 5

    KnowledgeConfigResponse:
      type: object
      properties:
        available_chunkers:
          type: array
          items:
            $ref: '#/components/schemas/ChunkerInfo'
        available_vector_dbs:
          type: array
          items:
            type: string
          example: ["chromadb"]
        default_chunker:
          type: string
          description: Default chunker type
          example: "character"
        default_vector_db:
          type: string
          description: Default vector database
          example: "chromadb"
        embedding_model:
          $ref: '#/components/schemas/EmbeddingModelInfo'

    ChunkerInfo:
      type: object
      properties:
        name:
          type: string
          description: Chunker name
          example: "character"
        description:
          type: string
          description: Chunker description
          example: "按字符数量分块，适合通用文本"
        default_chunk_size:
          type: integer
          description: Default chunk size
          example: 1000
        default_overlap:
          type: integer
          description: Default overlap size
          example: 100

    EmbeddingModelInfo:
      type: object
      properties:
        provider:
          type: string
          description: Model provider
          example: "openai"
        model:
          type: string
          description: Model name
          example: "text-embedding-3-small"
        dimensions:
          type: integer
          description: Embedding dimensions
          example: 1536
